# 学习链接：https://www.bilibili.com/video/BV1Yh411o7Sz?p=36&spm_id_from=pageDriver
# https://book.apeland.cn/details/154/

'''
- 多线程 threading： 一个人有与异性聊天和看剧两件事要做。单线程的她可以看完剧再去聊天，但这样子可能就没人陪她聊天了「哼，发消息不回」。
我们把她看成一个CPU核心，为她开起多线程——先看一会剧，偶尔看看新消息，在两件事（线程）间来回切换。
多线程：单个CPU核心可以同时做几件事，不至于卡在某一步傻等着。
    - 用处：爬取网站信息（爬虫），等待多个用户输入
    - 缺点：python中的多线程无法利用多核优势，其根源是 GIL【 Global Interpreter Lock(全局解释器锁)】 的存在


- 多进程 processing： 一个人有很多砖需要搬，他领取手套、推车各种物资（向系统申请了资源）然后开始搬砖。
然而他身边有很多人，我们让这些人去帮他！（一核有难，八核围观）。于是他们做了分工，砖很快就搬完了。
多进程让多个CPU核心可以一起做事，不至于只有一人干活而其他人傻站着。
    - 用处：进行高性能计算。只有多进程方案设计合理，才能加速计算。

- 选择多线程还是多进程？
    - CPU 密集型：程序比较偏重于计算，需要经常使用 CPU 来运算。例如科学计算的程序，机器学习的程序等。
        - 程序是属于 CPU 密集型，建议使用多进程
    - I/O 密集型：顾名思义就是程序需要频繁进行输入输出操作。爬虫程序就是典型的 I/O 密集型程序。
        - 多线程就更适合应用于 I/O 密集型程序

'''

